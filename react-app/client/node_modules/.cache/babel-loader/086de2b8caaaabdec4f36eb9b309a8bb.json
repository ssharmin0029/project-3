{"ast":null,"code":"var _jsxFileName = \"/Users/sabrina/Desktop/COLUMBIA/CODING-BOOTCAMP/team-projects/project-3/project-3/react-app/client/src/Utils/Three.js\";\nimport * as THREE from 'three';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Three = () => {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setClearColor(\"#ffffff\");\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener('resize', () => {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n  });\n  const light = new THREE.PointLight('0xffd700');\n  light.position.set(0, 0, 15);\n  const geometry = new THREE.CircleGeometry(1, 30);\n  const material = new THREE.MeshBasicMaterial({\n    color: 0xffd700\n  });\n  const circle = new THREE.Mesh(geometry, material);\n  const geo = new THREE.BoxGeometry();\n  const mats = new THREE.MeshDepthMaterial({\n    color: 0x00ffd\n  });\n  const box = new THREE.Mesh(geo, mats);\n  scene.add(circle);\n  scene.add(box);\n  scene.add(light);\n  camera.position.z = 25;\n\n  const animate = function () {\n    requestAnimationFrame(animate);\n    circle.rotation.y += 0.01;\n    renderer.render(scene, camera);\n  };\n\n  animate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 13\n  }, this);\n};\n\n_c = Three;\nexport default Three;\n\nvar _c;\n\n$RefreshReg$(_c, \"Three\");","map":{"version":3,"sources":["/Users/sabrina/Desktop/COLUMBIA/CODING-BOOTCAMP/team-projects/project-3/project-3/react-app/client/src/Utils/Three.js"],"names":["THREE","React","Three","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","setClearColor","document","body","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","light","PointLight","position","set","geometry","CircleGeometry","material","MeshBasicMaterial","color","circle","Mesh","geo","BoxGeometry","mats","MeshDepthMaterial","box","add","z","animate","requestAnimationFrame","rotation","y","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,MAAMC,KAAK,GAAI,MAAO;AAId,QAAMC,KAAK,GAAG,IAAIH,KAAK,CAACI,KAAV,EAAd;AACY,QAAMC,MAAM,GAAG,IAAIL,KAAK,CAACM,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAf;AAEA,QAAMC,QAAQ,GAAG,IAAIV,KAAK,CAACW,aAAV,EAAjB;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAC,EAAAA,QAAQ,CAACG,aAAT,CAAuB,SAAvB;AACAC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA2BN,QAAQ,CAACO,UAApC;AAEAV,EAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AAEpCR,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAJ,IAAAA,MAAM,CAACc,MAAP,GAAgBZ,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAAzC;AACAJ,IAAAA,MAAM,CAACe,sBAAP;AACH,GALD;AAOA,QAAMC,KAAK,GAAG,IAAIrB,KAAK,CAACsB,UAAV,CAAqB,UAArB,CAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,EAAzB;AAIA,QAAMC,QAAQ,GAAG,IAAIzB,KAAK,CAAC0B,cAAV,CAAyB,CAAzB,EAA4B,EAA5B,CAAjB;AACA,QAAMC,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,iBAAV,CAA6B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA7B,CAAjB;AACA,QAAMC,MAAM,GAAG,IAAI9B,KAAK,CAAC+B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAf;AAEA,QAAMK,GAAG,GAAG,IAAIhC,KAAK,CAACiC,WAAV,EAAZ;AACA,QAAMC,IAAI,GAAG,IAAIlC,KAAK,CAACmC,iBAAV,CAA4B;AAACN,IAAAA,KAAK,EAAE;AAAR,GAA5B,CAAb;AACA,QAAMO,GAAG,GAAG,IAAIpC,KAAK,CAAC+B,IAAV,CAAeC,GAAf,EAAoBE,IAApB,CAAZ;AACA/B,EAAAA,KAAK,CAACkC,GAAN,CAAWP,MAAX;AACA3B,EAAAA,KAAK,CAACkC,GAAN,CAAWD,GAAX;AACAjC,EAAAA,KAAK,CAACkC,GAAN,CAAUhB,KAAV;AACAhB,EAAAA,MAAM,CAACkB,QAAP,CAAgBe,CAAhB,GAAoB,EAApB;;AAEA,QAAMC,OAAO,GAAG,YAAY;AACxBC,IAAAA,qBAAqB,CAAED,OAAF,CAArB;AAGAT,IAAAA,MAAM,CAACW,QAAP,CAAgBC,CAAhB,IAAqB,IAArB;AAGAhC,IAAAA,QAAQ,CAACiC,MAAT,CAAiBxC,KAAjB,EAAwBE,MAAxB;AACH,GARD;;AAUAkC,EAAAA,OAAO;AAInB,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGP,CArDD;;KAAMrC,K;AAuDN,eAAeA,KAAf","sourcesContent":["import * as THREE from 'three'\nimport React from 'react'\n\n\nconst Three  = ( ) => {\n\n\n    \n        const scene = new THREE.Scene();\n                    const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n\n                    const renderer = new THREE.WebGLRenderer();\n                    renderer.setSize( window.innerWidth, window.innerHeight );\n                    renderer.setClearColor(\"#ffffff\")\n                    document.body.appendChild( renderer.domElement );\n\n                    window.addEventListener('resize', () => {\n                    \n                        renderer.setSize( window.innerWidth, window.innerHeight );\n                        camera.aspect = window.innerWidth/window.innerHeight\n                        camera.updateProjectionMatrix();\n                    })\n                   \n                    const light = new THREE.PointLight('0xffd700');\n                    light.position.set(0, 0, 15)\n                \n                    \n                  \n                    const geometry = new THREE.CircleGeometry(1, 30);\n                    const material = new THREE.MeshBasicMaterial( { color: 0xffd700 } );\n                    const circle = new THREE.Mesh( geometry, material );\n\n                    const geo = new THREE.BoxGeometry()\n                    const mats = new THREE.MeshDepthMaterial({color: 0x00ffd})\n                    const box = new THREE.Mesh(geo, mats)\n                    scene.add( circle );\n                    scene.add( box )\n                    scene.add(light)\n                    camera.position.z = 25;\n\n                    const animate = function () {\n                        requestAnimationFrame( animate );\n\n                        \n                        circle.rotation.y += 0.01;\n                    \n\n                        renderer.render( scene, camera );\n                    };\n\n                    animate();\n    \n            \n        \n        return(\n            <div></div>\n        )\n}\n\nexport default Three;"]},"metadata":{},"sourceType":"module"}